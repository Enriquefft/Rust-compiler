program         = { item }

item            = [ DocString ]
                 | function
                 | struct_def
                 | enum_def
                 | trait_def
                 | impl_def
                 | use_decl
                 | mod_decl
                 | constant
                 | static_variable
                 | type_alias
                 | macro_def
                 | foreign_mod

function        = [ "unsafe" ] "fn" identifier "(" [ parameters ] ")" [ "->" type ] block

parameters      = parameter { "," parameter }
parameter       = [ "mut" ] identifier ":" type

struct_def      = "struct" identifier [ generics ] "{" [ struct_fields ] "}"
struct_fields   = struct_field { "," struct_field }
struct_field    = identifier ":" type

enum_def        = "enum" identifier [ generics ] "{" [ enum_variants ] "}"
enum_variants   = enum_variant { "," enum_variant }
enum_variant     = identifier [ "(" [ variant_fields ] ")" ]
variant_fields   = type { "," type }

trait_def       = "trait" identifier [ generics ] "{" { trait_item } "}"
trait_item      = function | type_alias

impl_def        = "impl" [ generics ] [ "for" type ] "{" { impl_item } "}"
impl_item       = function | constant

use_decl        = "use" path ";"

mod_decl        = "mod" identifier [ ";" | "{" { item } "}" ]

constant        = "const" identifier ":" type "=" expression ";"

static_variable = "static" identifier ":" type "=" expression ";"

type_alias      = "type" identifier [ generics ] "=" type ";"

macro_def       = "macro_rules!" identifier "{" macro_rules_body "}"

foreign_mod     = "extern" [ string_literal ] "{" { foreign_item } "}"
foreign_item    = function | static_item
static_item     = "static" identifier ":" type "=" expression ";"

block           = "{" { statement } [ expression ] "}"

statement       = let_statement
                 | expression_statement
                 | item

let_statement    = "let" [ "mut" ] pattern [ ":" type ] [ "=" expression ] ";"

expression_statement = expression ";"

expression       = assignment
                 | conditional
                 | loop
                 | function_call
                 | binary_op
                 | unary_op
                 | literal
                 | identifier
                 | "(" expression ")"

assignment       = identifier "=" expression

conditional      = "if" expression block [ "else" block ]

loop             = "loop" block
                 | "while" expression block
                 | "for" identifier "in" expression block

function_call    = identifier "(" [ arguments ] ")"
arguments         = expression { "," expression }

binary_op        = expression operator expression
operator          = "+" | "-" | "*" | "/" | "==" | "!=" | "<" | ">" | "<=" | ">=" | "&&" | "||"

unary_op         = "-" expression
                 | "!" expression

literal           = integer_literal
                 | float_literal
                 | boolean_literal
                 | string_literal
                 | char_literal

pattern           = identifier
                 | "_"
                 | pattern_tuple
                 | pattern_struct

pattern_tuple     = "(" [ pattern { "," pattern } ] ")"

pattern_struct    = identifier "{" [ pattern_field { "," pattern_field } ] "}"
pattern_field     = identifier ":" pattern

type              = primitive_type
                 | path
                 | reference_type
                 | tuple_type
                 | array_type
                 | function_type
                 | generic_type

primitive_type    = "i8" | "i16" | "i32" | "i64" | "i128"
                 | "u8" | "u16" | "u32" | "u64" | "u128"
                 | "f32" | "f64"
                 | "bool" | "char" | "str" | "()"

reference_type    = "&" [ "mut" ] type

tuple_type        = "(" [ type { "," type } ] ")"

array_type        = "[" type ";" integer_literal "]"

function_type     = "fn" "(" [ type { "," type } ] ")" [ "->" type ]

generic_type      = identifier [ "<" type { "," type } ">" ]

path              = identifier { "::" identifier }

identifier        = letter { letter | digit | "_" }

integer_literal   = digit { digit }

float_literal     = digit { digit } "." digit { digit }

boolean_literal   = "true" | "false"

string_literal    = "\"" { any_character_except_quote } "\""

char_literal      = "'" any_character_except_single_quote "'"

generics          = "<" generic_params ">"
generic_params    = generic_param { "," generic_param }
generic_param     = identifier [ ":" bound ]

bound             = identifier [ "+" identifier ]

macro_rules_body   = { macro_rule }
macro_rule        = pattern "=>" replacement ";"

replacement       = { token }
