Program = { ItemOrComment }

ItemOrComment = Item | Comment

Item = Function
     | StructDefinition
     | StaticVariableDeclaration
     | Statement

Function = [ "unsafe" ] "fn" Identifier "(" [ ParameterList ] ")" [ "->" Type ] BlockExpression

StructDefinition = "struct" Identifier "{" { StructField [ "," ] } "}"

StructField = Identifier ":" Type

StaticVariableDeclaration = "static" Identifier ":" Type "=" Expression ";"

ParameterList = Parameter { "," Parameter }

Parameter = Identifier ":" Type

Type = [ "&" [ "mut" ] ] BaseType

BaseType = "i32" | "i64" | "f32" | "f64" | "bool" | "str" | Identifier

Statement = LetStatement
          | ExpressionStatement
          | ReturnStatement
          | BlockExpression
          | UnsafeBlockExpression
          | WhileStatement
          | ForStatement
          | IfExpression

LetStatement = "let" [ "mut" ] Identifier [ ":" Type ] [ "=" Expression ] ";"

ReturnStatement = "return" [ Expression ] ";"

ExpressionStatement = Expression ";"

BlockExpression = "{" { Statement } [ Expression ] "}"

UnsafeBlockExpression = "unsafe" BlockExpression

WhileStatement = "while" Expression BlockExpression

ForStatement = "for" Identifier "in" Expression BlockExpression

IfExpression = "if" Expression BlockExpression [ "else" ( BlockExpression | IfExpression ) ]

Expression = AssignmentExpression

AssignmentExpression = LogicalOrExpression [ "=" AssignmentExpression ]

LogicalOrExpression = LogicalAndExpression { "||" LogicalAndExpression }

LogicalAndExpression = EqualityExpression { "&&" EqualityExpression }

EqualityExpression = RelationalExpression { ( "==" | "!=" ) RelationalExpression }

RelationalExpression = AdditiveExpression { ( "<" | ">" | "<=" | ">=" ) AdditiveExpression }

AdditiveExpression = MultiplicativeExpression { ( "+" | "-" ) MultiplicativeExpression }

MultiplicativeExpression = UnaryExpression { ( "*" | "/" ) UnaryExpression }

UnaryExpression = [ "-" | "!" ] PostfixExpression

PostfixExpression = PrimaryExpression { PostfixOperator }

PostfixOperator = "." Identifier
                | "(" [ ArgumentList ] ")"
                | "!" "(" [ MacroArgumentList ] ")"

PrimaryExpression = Literal
                  | Identifier
                  | "(" Expression ")"
                  | BlockExpression
                  | UnsafeBlockExpression
                  | IfExpression

ArgumentList = Expression { "," Expression }

MacroArgumentList = [ MacroArgument { "," MacroArgument } ]

MacroArgument = Expression | Statement

Literal = IntegerLiteral
        | FloatLiteral
        | BooleanLiteral
        | StringLiteral
        | CharLiteral

IntegerLiteral = Digit { Digit }

FloatLiteral = Digit { Digit } "." Digit { Digit }

BooleanLiteral = "true" | "false"

StringLiteral = "\"" { StringCharacter } "\""

CharLiteral = "'" Character "'"

StringCharacter = Character | EscapeSequence

Character = Any valid character except for the double quote (") and backslash (\), or use of EscapeSequence

EscapeSequence = "\\" ( "\"" | "'" | "\\" | "n" | "t" | "r" )

Identifier = Letter { Letter | Digit | "_" }

Digit = "0" | "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9"

Letter = "a" | "b" | ... | "z" | "A" | "B" | ... | "Z"

Comment = SingleLineComment | MultiLineComment

SingleLineComment = "//" { AnyCharacterExceptNewline } ( Newline | EOF )

MultiLineComment = "/*" { AnyCharacterExceptEndComment } "*/"

AnyCharacterExceptNewline = any character except newline

AnyCharacterExceptEndComment = any character except "*/"
